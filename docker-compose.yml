version: '3.8'

services:
  # Database
  question_service_database:
    image: mongo:7-jammy
    networks:
      - peerprep_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_DB: ${MONGO_DB}
    volumes:
      - ./mongodb/docker-entrypoint-initdb.d/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    restart: unless-stopped

  # Redis Cache
  question_service_cache:
    image: redis:7-bookworm
    networks:
      - peerprep_network
    # TODO: Set a password
    # command: /bin/sh -c "redis-server --requirepass $$REDIS_HOST_PASSWORD"
    restart: unless-stopped

  # Databse initialiser
  question_service_database_initialiser:
    image: ghcr.io/cs3219-ay2324s1-g04/peerprep_question_service_database_initialiser
    build:
      context: .
      dockerfile: ./dockerfiles/database_initaliser.dockerfile
    networks:
      - peerprep_network
    environment:
      MONGO_URI_LOCAL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@question_service_database:27017/${MONGO_DB}?authSource=admin
      REDIS_HOST: question_service_cache
      REDIS_DOCKER_PORT: 6379
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      EXPRESS_DOCKER_PORT: 9001
      NODE_ENV: ${NODE_ENV}
    depends_on:
      - question_service_database
      - question_service_cache
    restart: on-failure

  # Scheduled question deleter
  question_service_scheduled_question_deleter:
    image: ghcr.io/cs3219-ay2324s1-g04/peerprep_question_service_scheduled_question_deleter
    build:
      context: .
      dockerfile: ./dockerfiles/scheduled_question_deleter.dockerfile
    networks:
      - peerprep_network
    command: /bin/sh -c "
      apt-get update &&
      apt-get upgrade -y &&
      apt-get install cron -y &&
      echo \"0 0 * * * node /peerprep_question_service_scheduled_question_deleter/jobs/scheduled_question_deleter.js\" >> temp_cron_file &&
      crontab temp_cron_file &&
      rm temp_cron_file &&
      tail -f /dev/null" # This keeps the container running
    environment:
      MONGO_URI_LOCAL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@question_service_database:27017/${MONGO_DB}?authSource=admin
      REDIS_HOST: question_service_cache
      REDIS_DOCKER_PORT: 6379
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      EXPRESS_DOCKER_PORT: 9001
      NODE_ENV: ${NODE_ENV}
    depends_on:
      - question_service_database
      - question_service_cache
    restart: on-failure

  # REST API
  question_service_api:
    image: ghcr.io/cs3219-ay2324s1-g04/peerprep_question_service_api
    build:
      context: .
      dockerfile: ./dockerfiles/api.dockerfile
    networks:
      - peerprep_network
    ports:
      - ${EXPRESS_LOCAL_PORT}:9001
    environment:
      MONGO_URI_LOCAL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@question_service_database:27017/${MONGO_DB}?authSource=admin
      REDIS_HOST: question_service_cache
      REDIS_DOCKER_PORT: 6379
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      EXPRESS_DOCKER_PORT: 9001
      NODE_ENV: ${NODE_ENV}
    depends_on:
      - question_service_database
      - question_service_cache
    restart: unless-stopped

networks:
  peerprep_network:
    name: peerprep
    external: true
